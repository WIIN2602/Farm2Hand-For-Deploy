/*
  # Create Billing System for Farm2Hand

  1. New Tables
    - `Farm2Hand_order` - Main order table
    - `Farm2Hand_order_item` - Order items (products in each order)
    - `Farm2Hand_payment` - Payment tracking
    - `Farm2Hand_shipping` - Shipping information

  2. Relationships
    - Orders belong to customers (Farm2Hand_user)
    - Order items reference products (Farm2Hand_product) and orders
    - Payments reference orders
    - Shipping info references orders

  3. Triggers
    - Auto-update product stock when order is confirmed
    - Auto-calculate order totals

  4. Security
    - RLS policies for data access control
*/

-- Create Order Status Enum Type
DO $$ BEGIN
    CREATE TYPE order_status AS ENUM (
        'pending_payment',
        'confirmed', 
        'preparing',
        'shipping',
        'delivered',
        'cancelled',
        'refunded'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create Payment Status Enum Type
DO $$ BEGIN
    CREATE TYPE payment_status AS ENUM (
        'pending',
        'completed',
        'failed',
        'refunded'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create Payment Method Enum Type
DO $$ BEGIN
    CREATE TYPE payment_method AS ENUM (
        'credit_card',
        'bank_transfer',
        'cod',
        'wallet'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- 1. Create Orders Table
CREATE TABLE IF NOT EXISTS public."Farm2Hand_order" (
    id bigint generated by default as identity not null,
    order_number text unique not null,
    customer_id bigint not null,
    total_amount decimal(10,2) not null default 0,
    shipping_fee decimal(10,2) not null default 0,
    discount_amount decimal(10,2) not null default 0,
    final_amount decimal(10,2) not null default 0,
    status order_status not null default 'pending_payment',
    notes text,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    confirmed_at timestamptz,
    shipped_at timestamptz,
    delivered_at timestamptz,
    
    constraint Farm2Hand_order_pkey primary key (id),
    constraint Farm2Hand_order_customer_fkey 
        foreign key (customer_id) 
        references public."Farm2Hand_user"(id) 
        on delete cascade
);

-- 2. Create Order Items Table
CREATE TABLE IF NOT EXISTS public."Farm2Hand_order_item" (
    id bigint generated by default as identity not null,
    order_id bigint not null,
    product_id bigint not null,
    farmer_id bigint not null,
    product_name text not null,
    product_price decimal(10,2) not null,
    quantity integer not null,
    unit_price decimal(10,2) not null,
    total_price decimal(10,2) not null,
    created_at timestamptz default now(),
    
    constraint Farm2Hand_order_item_pkey primary key (id),
    constraint Farm2Hand_order_item_order_fkey 
        foreign key (order_id) 
        references public."Farm2Hand_order"(id) 
        on delete cascade,
    constraint Farm2Hand_order_item_product_fkey 
        foreign key (product_id) 
        references public."Farm2Hand_product"(id) 
        on delete restrict,
    constraint Farm2Hand_order_item_farmer_fkey 
        foreign key (farmer_id) 
        references public."Farm2Hand_user"(id) 
        on delete restrict
);

-- 3. Create Shipping Information Table
CREATE TABLE IF NOT EXISTS public."Farm2Hand_shipping" (
    id bigint generated by default as identity not null,
    order_id bigint not null,
    full_name text not null,
    phone text not null,
    address text not null,
    district text not null,
    province text not null,
    postal_code text not null,
    notes text,
    tracking_number text,
    carrier text,
    estimated_delivery timestamptz,
    actual_delivery timestamptz,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    
    constraint Farm2Hand_shipping_pkey primary key (id),
    constraint Farm2Hand_shipping_order_fkey 
        foreign key (order_id) 
        references public."Farm2Hand_order"(id) 
        on delete cascade
);

-- 4. Create Payment Table
CREATE TABLE IF NOT EXISTS public."Farm2Hand_payment" (
    id bigint generated by default as identity not null,
    order_id bigint not null,
    payment_method payment_method not null,
    amount decimal(10,2) not null,
    status payment_status not null default 'pending',
    transaction_id text,
    payment_data jsonb,
    paid_at timestamptz,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    
    constraint Farm2Hand_payment_pkey primary key (id),
    constraint Farm2Hand_payment_order_fkey 
        foreign key (order_id) 
        references public."Farm2Hand_order"(id) 
        on delete cascade
);

-- Create Indexes for Performance
CREATE INDEX IF NOT EXISTS idx_order_customer_id ON public."Farm2Hand_order"(customer_id);
CREATE INDEX IF NOT EXISTS idx_order_status ON public."Farm2Hand_order"(status);
CREATE INDEX IF NOT EXISTS idx_order_created_at ON public."Farm2Hand_order"(created_at);
CREATE INDEX IF NOT EXISTS idx_order_number ON public."Farm2Hand_order"(order_number);

CREATE INDEX IF NOT EXISTS idx_order_item_order_id ON public."Farm2Hand_order_item"(order_id);
CREATE INDEX IF NOT EXISTS idx_order_item_product_id ON public."Farm2Hand_order_item"(product_id);
CREATE INDEX IF NOT EXISTS idx_order_item_farmer_id ON public."Farm2Hand_order_item"(farmer_id);

CREATE INDEX IF NOT EXISTS idx_shipping_order_id ON public."Farm2Hand_shipping"(order_id);
CREATE INDEX IF NOT EXISTS idx_shipping_tracking ON public."Farm2Hand_shipping"(tracking_number);

CREATE INDEX IF NOT EXISTS idx_payment_order_id ON public."Farm2Hand_payment"(order_id);
CREATE INDEX IF NOT EXISTS idx_payment_status ON public."Farm2Hand_payment"(status);
CREATE INDEX IF NOT EXISTS idx_payment_transaction_id ON public."Farm2Hand_payment"(transaction_id);

-- Function to generate order number
CREATE OR REPLACE FUNCTION generate_order_number()
RETURNS text AS $$
BEGIN
    RETURN 'ORD-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-' || LPAD(nextval('order_number_seq')::text, 6, '0');
END;
$$ LANGUAGE plpgsql;

-- Create sequence for order numbers
CREATE SEQUENCE IF NOT EXISTS order_number_seq START 1;

-- Function to update product stock when order is confirmed
CREATE OR REPLACE FUNCTION update_product_stock_on_order_confirm()
RETURNS trigger AS $$
BEGIN
    -- Only update stock when status changes to 'confirmed'
    IF NEW.status = 'confirmed' AND OLD.status != 'confirmed' THEN
        -- Update stock for all items in this order
        UPDATE public."Farm2Hand_product" 
        SET 
            product_stock = product_stock - oi.quantity,
            in_stock = CASE 
                WHEN (product_stock - oi.quantity) <= 0 THEN false 
                ELSE in_stock 
            END,
            updated_at = now()
        FROM public."Farm2Hand_order_item" oi
        WHERE oi.order_id = NEW.id 
        AND public."Farm2Hand_product".id = oi.product_id;
        
        -- Set confirmed timestamp
        NEW.confirmed_at = now();
    END IF;
    
    -- Update the updated_at timestamp
    NEW.updated_at = now();
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to restore product stock when order is cancelled
CREATE OR REPLACE FUNCTION restore_product_stock_on_cancel()
RETURNS trigger AS $$
BEGIN
    -- Only restore stock when status changes to 'cancelled' from a confirmed state
    IF NEW.status = 'cancelled' AND OLD.status IN ('confirmed', 'preparing', 'shipping') THEN
        -- Restore stock for all items in this order
        UPDATE public."Farm2Hand_product" 
        SET 
            product_stock = product_stock + oi.quantity,
            in_stock = CASE 
                WHEN (product_stock + oi.quantity) > 0 THEN true 
                ELSE in_stock 
            END,
            updated_at = now()
        FROM public."Farm2Hand_order_item" oi
        WHERE oi.order_id = NEW.id 
        AND public."Farm2Hand_product".id = oi.product_id;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to auto-generate order number
CREATE OR REPLACE FUNCTION set_order_number()
RETURNS trigger AS $$
BEGIN
    IF NEW.order_number IS NULL OR NEW.order_number = '' THEN
        NEW.order_number = generate_order_number();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create Triggers
DROP TRIGGER IF EXISTS trigger_update_stock_on_confirm ON public."Farm2Hand_order";
CREATE TRIGGER trigger_update_stock_on_confirm
    BEFORE UPDATE ON public."Farm2Hand_order"
    FOR EACH ROW
    EXECUTE FUNCTION update_product_stock_on_order_confirm();

DROP TRIGGER IF EXISTS trigger_restore_stock_on_cancel ON public."Farm2Hand_order";
CREATE TRIGGER trigger_restore_stock_on_cancel
    BEFORE UPDATE ON public."Farm2Hand_order"
    FOR EACH ROW
    EXECUTE FUNCTION restore_product_stock_on_cancel();

DROP TRIGGER IF EXISTS trigger_set_order_number ON public."Farm2Hand_order";
CREATE TRIGGER trigger_set_order_number
    BEFORE INSERT ON public."Farm2Hand_order"
    FOR EACH ROW
    EXECUTE FUNCTION set_order_number();

-- Enable RLS on all tables
ALTER TABLE public."Farm2Hand_order" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."Farm2Hand_order_item" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."Farm2Hand_shipping" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."Farm2Hand_payment" ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Orders
CREATE POLICY "Users can view their own orders"
    ON public."Farm2Hand_order"
    FOR SELECT
    USING (customer_id = (current_setting('app.current_user_id', true))::bigint);

CREATE POLICY "Users can create their own orders"
    ON public."Farm2Hand_order"
    FOR INSERT
    WITH CHECK (customer_id = (current_setting('app.current_user_id', true))::bigint);

CREATE POLICY "Users can update their own pending orders"
    ON public."Farm2Hand_order"
    FOR UPDATE
    USING (customer_id = (current_setting('app.current_user_id', true))::bigint AND status = 'pending_payment');

-- Farmers can view orders containing their products
CREATE POLICY "Farmers can view orders with their products"
    ON public."Farm2Hand_order"
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order_item" oi
            WHERE oi.order_id = id 
            AND oi.farmer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

-- RLS Policies for Order Items
CREATE POLICY "Users can view order items for their orders"
    ON public."Farm2Hand_order_item"
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order" o
            WHERE o.id = order_id 
            AND o.customer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

CREATE POLICY "Users can create order items for their orders"
    ON public."Farm2Hand_order_item"
    FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order" o
            WHERE o.id = order_id 
            AND o.customer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

-- Farmers can view order items for their products
CREATE POLICY "Farmers can view their product order items"
    ON public."Farm2Hand_order_item"
    FOR SELECT
    USING (farmer_id = (current_setting('app.current_user_id', true))::bigint);

-- RLS Policies for Shipping
CREATE POLICY "Users can view shipping info for their orders"
    ON public."Farm2Hand_shipping"
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order" o
            WHERE o.id = order_id 
            AND o.customer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

CREATE POLICY "Users can create shipping info for their orders"
    ON public."Farm2Hand_shipping"
    FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order" o
            WHERE o.id = order_id 
            AND o.customer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

-- RLS Policies for Payments
CREATE POLICY "Users can view payments for their orders"
    ON public."Farm2Hand_payment"
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order" o
            WHERE o.id = order_id 
            AND o.customer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

CREATE POLICY "Users can create payments for their orders"
    ON public."Farm2Hand_payment"
    FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public."Farm2Hand_order" o
            WHERE o.id = order_id 
            AND o.customer_id = (current_setting('app.current_user_id', true))::bigint
        )
    );

-- Admin policies (for authenticated users - system admin)
CREATE POLICY "Authenticated users can manage all orders"
    ON public."Farm2Hand_order"
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage all order items"
    ON public."Farm2Hand_order_item"
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage all shipping"
    ON public."Farm2Hand_shipping"
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage all payments"
    ON public."Farm2Hand_payment"
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Insert sample data for testing
INSERT INTO public."Farm2Hand_order" (
    customer_id, total_amount, shipping_fee, final_amount, status, notes
) VALUES
(
    (SELECT id FROM public."Farm2Hand_user" WHERE "Email" = 'customer@test.com' LIMIT 1),
    240.00, 50.00, 290.00, 'delivered', 'ทดสอบออเดอร์แรก'
),
(
    (SELECT id FROM public."Farm2Hand_user" WHERE "Email" = 'malee@gmail.com' LIMIT 1),
    180.00, 0.00, 180.00, 'shipping', 'ออเดอร์ที่สอง - ส่งฟรี'
);

-- Insert sample order items
INSERT INTO public."Farm2Hand_order_item" (
    order_id, product_id, farmer_id, product_name, product_price, quantity, unit_price, total_price
) VALUES
-- Order 1 items
(
    1,
    (SELECT id FROM public."Farm2Hand_product" WHERE product_name = 'มะม่วงน้ำดอกไม้' LIMIT 1),
    (SELECT product_owner FROM public."Farm2Hand_product" WHERE product_name = 'มะม่วงน้ำดอกไม้' LIMIT 1),
    'มะม่วงน้ำดอกไม้', 120.00, 2, 120.00, 240.00
),
-- Order 2 items
(
    2,
    (SELECT id FROM public."Farm2Hand_product" WHERE product_name = 'กล้วยหอมทอง' LIMIT 1),
    (SELECT product_owner FROM public."Farm2Hand_product" WHERE product_name = 'กล้วยหอมทอง' LIMIT 1),
    'กล้วยหอมทอง', 60.00, 3, 60.00, 180.00
);

-- Insert sample shipping info
INSERT INTO public."Farm2Hand_shipping" (
    order_id, full_name, phone, address, district, province, postal_code, notes
) VALUES
(
    1, 'นางสาวมาลี สุขใจ', '082-345-6789', 
    '123 ถนนสีลม', 'บางรัก', 'กรุงเทพมหานคร', '10500', 
    'ส่งช่วงเช้า 9-12 น.'
),
(
    2, 'นางสาวสุดา ช้อปปิ้ง', '084-567-8901',
    '456 ถนนสุขุมวิท', 'เมือง', 'ชลบุรี', '20000',
    'โทรก่อนส่ง'
);

-- Insert sample payments
INSERT INTO public."Farm2Hand_payment" (
    order_id, payment_method, amount, status, transaction_id, paid_at
) VALUES
(
    1, 'credit_card', 290.00, 'completed', 'TXN-20240101-001', now() - interval '2 days'
),
(
    2, 'bank_transfer', 180.00, 'completed', 'TXN-20240102-001', now() - interval '1 day'
);